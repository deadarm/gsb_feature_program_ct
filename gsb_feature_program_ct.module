<?php
/**
 * @file
 * Code for the GSB Feature Program Content Type feature.
 */

include_once 'gsb_feature_program_ct.features.inc';

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gsb_feature_program_ct_form_node_form_alter(&$form, &$form_state) {
  $language = $form['language']['#value'];

  if ($form['type']['#value'] != 'program') {
    return;
  }

  $form['title']['#title'] = 'Program Name';

  $form['field_additional_pages']['und'][0]['#title'] = '';

  // hide the n/a option for field_image_or_video radio buttons
  unset($form['field_image_or_video']['und']['#options']['_none']);

  // show/hide the image or video fields based on field_image_or_video value
  $form['field_learn_more_photo']['#states'] = array(
    'visible' => array(
      ':input[name="field_image_or_video[' . $language . ']"]' => array(
        array('value' => 'Image'),
      ),
    ),
  );
  $form['field_learn_more_video_title']['#states'] = array(
    'visible' => array(
      ':input[name="field_image_or_video[' . $language . ']"]' => array(
        array('value' => 'Video'),
      ),
    ),
  );
  $form['field_video_description']['#states'] = array(
    'visible' => array(
      ':input[name="field_image_or_video[' . $language . ']"]' => array(
        array('value' => 'Video'),
      ),
    ),
  );
  $form['field_video_url']['#states'] = array(
    'visible' => array(
      ':input[name="field_image_or_video[' . $language . ']"]' => array(
        array('value' => 'Video'),
      ),
    ),
  );

  $form['field_link_single']['#states'] = array(
    'visible' => array(
      ':input[name="field_program_detail[' . $language . ']"]' => array(
        array('value' => '1'),
      ),
    ),
  );

  $form['field_overview_description']['#states'] = array(
    'invisible' => array(
      ':input[name="field_program_detail[' . $language . ']"]' => array(
        array('value' => '1'),
      ),
    ),
  );
  $form['field_key_benefits_description']['#states'] = array(
    'invisible' => array(
      ':input[name="field_program_detail[' . $language . ']"]' => array(
        array('value' => '1'),
      ),
    ),
  );
}

/**
 * Implements hook_node_insert().
 */
function gsb_feature_program_ct_entity_insert($node, $type) {
  if ($type == 'node') {
    _gsb_feature_program_ct_node_save($node);
  }
}

/**
 * Implements hook_node_update().
 */
function gsb_feature_program_ct_entity_update($node, $type) {
  if ($type == 'node') {
    _gsb_feature_program_ct_node_save($node);
  }
}

/**
 * Helper for hook_node_insert() and hook_node_update().
 */
function _gsb_feature_program_ct_node_save($node) {

  if ($node->type != 'program') {
    return;
  }
  if ($node->path['alias'] == '') {
    return;
  }

  _gsb_feature_program_ct_create_ppp($node, 'curriculum');
  _gsb_feature_program_ct_create_ppp($node, 'faculty');
  _gsb_feature_program_ct_create_ppp($node, 'participant');

  if ($node->field_program_small_teams['und'][0]['value'] == '1') {
    _gsb_feature_program_ct_create_ppp($node, 'team');
  }

}

function _gsb_feature_program_ct_create_ppp($node, $ppp_type) {

  $ppp_node = new stdClass();  // Create a new node object
  $ppp_node->type = 'program_panelized_page';  // Content type
  $ppp_node->language = LANGUAGE_NONE;
  node_object_prepare($ppp_node);  //Set some default values

  $ppp_node->title = $node->title . ' --- ' . $ppp_type;

  $ppp_node->status = 1;   // (1 or 0): published or unpublished
  $ppp_node->promote = 0;  // (1 or 0): promoted to front page or not
  $ppp_node->sticky = 0;   // (1 or 0): sticky at top of lists or not
  $ppp_node->comment = 0;  // 2 = comments open, 1 = comments closed, 0 = comments hidden

  // Add author of the node
  $ppp_node->uid = 1;

  $program_path_alias = $node->path['alias'];
  $program_path_alias_title = explode('/', $program_path_alias);
  $program_path_alias_title = $program_path_alias_title[sizeof($program_path_alias_title) - 1];

  $path = 'exec-ed/programs/' . $program_path_alias_title . '/' . $ppp_type;
  $ppp_node->path = array('alias' => $path);

  $path = drupal_lookup_path("source", $path);
  $found_node = menu_get_object("node", 1, $path);

  if (!$found_node) {
    // Save the new Program Panelized Page node
    node_save($ppp_node);
    // Resave the Program Panelized Page node
    // With the in-place editor option
    $ppp_node = node_load($ppp_node->nid);
    $ppp_node->field_program['und'][0]['target_id'] = $node->nid;
    $ppp_node->panelizer['page_manager']->pipeline = 'ipe';
    node_save($ppp_node);
  }

}

/**
 * Implementation of hook_block_info()
 *
 */
function gsb_feature_program_ct_block_info() {
  return array(
    'program_menu' => array(
      'info' => t('Program Menu'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    )
  );
}

/**
 * Implementation of hook_block_view
 *
 * Define callbacks for block display
 *
 */
function gsb_feature_program_ct_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'program_menu':
      $block['content'] = theme('gsb_feature_program_ct_program_menu');
      break;
  }
  return $block;
}

/**
 * Implements hook_theme().
 *
 * Define custom theme hooks
 */
function gsb_feature_program_ct_theme($existing, $type , $theme, $path) {
  return array(
    'gsb_feature_program_ct_program_menu' => array(
      'template' => 'templates/gsb-freature-program-ct-program-menu',
      'file' => 'program_menu.theme.inc',
    )
  );
}

/**
 * Implements hook_field_extra_fields().
 */
function gsb_feature_program_ct_field_extra_fields() {
  $extra = array();
  $extra['node']['program']['display'] = array(
    'gsb_program_explore_more' => array(
      'label' => t('Explore Other Programs'),
      'description' => t('Programs with same Career Levels and Key Topics'),
      'weight' => 0,
    ),
    'gsb_program_program_instance_fields' => array(
      'label' => t('Program Instance Fields'),
      'description' => t('Renders the program instance fields.'),
      'weight' => 0,
    ),
  );
  return $extra;
}

/**
 * Implements hook_entity_view().
 */
function gsb_feature_program_ct_entity_view($entity, $type, $view_mode, $langcode) {

  // Only go thru this code if we are working with a node
  if ($type != 'node') {
    return;
  }
  // Only go thru this code if we are working with a program node
  if ($entity->type != 'program') {
    return;
  }
  // Only go thru this code if the 'explore more' field is visible
  $fields = field_extra_fields_get_display('node', $entity->type, $view_mode);
  if (!empty($fields['gsb_program_explore_more']['visible'])) {
    gsb_feature_program_ct_explore_more($entity, $type, $view_mode, $langcode);
  }
  else if (!empty($fields['gsb_program_program_instance_fields']['visible'])) {
    gsb_feature_program_ct_program_instance_fields($entity, $type, $view_mode, $langcode);
  }

}

/**
 * Implements hook_entity_view().
 */
function gsb_feature_program_ct_explore_more($entity, $type, $view_mode, $langcode) {

  // Only go thru this code if we are working with a node
  if ($type != 'node') {
    return;
  }
  // Only go thru this code if we are working with a program node
  if ($entity->type != 'program') {
    return;
  }
  // Only go thru this code if the 'explore more' field is visible
  $fields = field_extra_fields_get_display('node', $entity->type, $view_mode);
  if (empty($fields['gsb_program_explore_more']['visible'])) {
    return;
  }

  // Get the list of career level tids
  $wrapper = entity_metadata_wrapper($type, $entity);
  $tids = array();
  foreach ($wrapper->field_career_level as $term) {
    if ($term->value()) {
      $tids[] = $term->value()->tid;
    }
  };

  // Get the list of key program topics tids
  $wrapper = entity_metadata_wrapper($type, $entity);
  $ktids = array();
  foreach ($wrapper->field_key_program_topics as $term) {
    if ($term->value()) {
      $ktids[] = $term->value()->tid;
    }
  };

  $nid = $entity->nid;

  // Run a query to find other programs that have key topics and career levels
  // like the program node we are viewing
  $query = db_select('node', 'n');
  $query->fields('n', array('nid', 'status', 'type', 'created'));
  $query->join('field_data_field_career_level', 'cl', "n.nid = cl.entity_id AND cl.entity_type = 'node'");
  $query->join('taxonomy_term_data', 't', "t.tid = cl.field_career_level_tid");
  $query->join('field_data_field_key_program_topics', 'kpt', "n.nid = kpt.entity_id AND kpt.entity_type = 'node'");
  $query->fields('kt', array('tid'));
  $query->join('taxonomy_term_data', 'kt', "kt.tid = kpt.field_key_program_topics_tid");
  $query->condition('n.nid', $nid, '<>');
  $query->condition('n.type', 'program');
  $query->condition('n.status', '1');
  $query->condition('t.tid', $tids, 'IN');
  $query->condition('kt.tid', $ktids, 'IN');
  $query->orderBy('created', 'DESC');
  $query->orderBy('nid', 'DESC');
  $results = $query->execute();

  // Get the counts of programs that have more than one match
  $programs = array();
  foreach ($results as $record) {
    $programs[$record->nid] = (empty($programs[$record->nid])) ? 1 : $programs[$record->nid] + 1;
  }
  // Sort descending so we can find the programs with the most matches
  arsort($programs);
  // Only keep the top 3
  $programs = array_slice($programs, 0, 3, TRUE);

  // Render the top 3 matching programs in the 'expore more' wrapper
  if ($programs) {

    $nodes = node_load_multiple(array_keys($programs));
    $content = node_view_multiple($nodes, 'teaser');

    // Wrap content in container.
    $content_wrapper = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('explore-more-content'),
      ),
    );
    $content_wrapper['content'] = $content;

    // Wrap content and title in container.
    $container = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('gsb-program-expore-more-wrapper'),
      ),
    );

    // Add a title.
    $container['title'] = array('#markup' => '<div class="superhead">' . t('Explore More') . '</div>');
    $container['content'] = $content_wrapper;

    $entity->content['gsb_program_explore_more'] = $container;
  }

}

/**
 * Implements hook_entity_view().
 */
function gsb_feature_program_ct_program_instance_fields($entity, $type, $view_mode, $langcode) {

  // Only go thru this code if we are working with a node
  if ($type != 'node') {
    return;
  }
  // Only go thru this code if we are working with a program node
  if ($entity->type != 'program') {
    return;
  }
  // Only go thru this code if the 'explore more' field is visible
  $fields = field_extra_fields_get_display('node', $entity->type, $view_mode);
  if (empty($fields['gsb_program_program_instance_fields']['visible'])) {
    return;
  }

  $nid = $entity->nid;

  // Lookup the program instances for this program
  $query = db_select('node', 'n');
  $query->fields('n', array('nid', 'status', 'type'));
  $query->join('field_data_field_program', 'fp', "n.nid = fp.entity_id AND fp.entity_type = 'node' AND fp.deleted = '0'");
  $query->fields('fp', array('entity_id', 'entity_type', 'deleted', 'field_program_target_id'));
  $query->join('node', 'nodefp', 'fp.field_program_target_id = nodefp.nid');
  $query->fields('nodefp', array('nid'));
  $query->join('field_data_field_instance_date', 'fid', "n.nid = fid.entity_id AND fid.entity_type = 'node' AND fid.deleted = '0'");
  $query->fields('fid', array('field_instance_date_value'));
  $query->condition('nodefp.nid', $nid);
  $query->condition('n.status', '1');
  $query->condition('n.type', 'program_instance');
  $query->orderBy('fid.field_instance_date_value', 'DESC');
  //$query->range(0,1);
  $results = $query->execute();

  $node_wrapper = entity_metadata_wrapper('node', $nid);

  $program_instance_markups = array();
  foreach ($results as $record) {
    $instance_wrapper = entity_metadata_wrapper('node', $record->nid);
    // add program format markup
    $program_location = $instance_wrapper->field_program_location->value();
    $ewrap_location = entity_metadata_wrapper('field_collection_item', $program_location);
    $program_format = $ewrap_location->field_program_format->value();
    $program_instance_markups[$record->nid][] = '<div class="program-format">' . $program_format->name . '</div>';
    // add tuition amount markup
    $tuition = $instance_wrapper->field_tuition->value();
    $program_instance_markups[$record->nid][] = '<div class="tuition-amount">' . $tuition['title'] . '</div>';
    // add included in tuition markup
    $included_in_tuition = $instance_wrapper->field_included_in_tuition->value();
    $program_instance_markups[$record->nid][] = '<div class="included-in-tuition">' . $included_in_tuition['safe_value'] . '</div>';
    // seek in a couple program fields
    // add awarded_upon_completion markup from program
    $awarded_upon_completion = $node_wrapper->field_awarded_upon_completion->value();
    if ($awarded_upon_completion) {
      $program_instance_markups[$record->nid][] = '<div class="awarded-upon-completion">' . $awarded_upon_completion . '</div>';
    }
    // add app_requirements_intro markup from program
    $app_requirements_intro = $node_wrapper->field_app_requirements_intro->value();
    if ($app_requirements_intro) {
      $program_instance_markups[$record->nid][] = '<div class="app-requirements-intro">' . $app_requirements_intro . '</div>';
    }
  }

  // Wrap content and title in container.
  $container = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('gsb-program-program-instance-fields'),
    ),
  );

  $instance_wrappers = array();

  foreach ($program_instance_markups as $pi_markup) {

    // Wrap content in container.
    $content_wrapper = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('program-instance-wrapper'),
      ),
    );
    $content_wrapper['content'] = array('#markup' => '<div class="program-instance">' . implode(" ", $pi_markup) . '</div>');

    $instance_wrappers['content'][] = $content_wrapper;

  }

  // Add a title.
  $container['title'] = array('#markup' => '<div class="superhead">' . t('Program Instance Fields') . '</div>');
  $container['content'] = $instance_wrappers;

  $entity->content['gsb_program_program_instance_fields'] = $container;

}