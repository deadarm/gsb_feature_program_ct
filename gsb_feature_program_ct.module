<?php
/**
 * @file
 * Code for the GSB Feature Program Content Type feature.
 */

include_once 'gsb_feature_program_ct.features.inc';

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gsb_feature_program_ct_form_node_form_alter(&$form, &$form_state) {
  $language = $form['language']['#value'];

  if ($form['type']['#value'] != 'program') {
    return;
  }

  drupal_add_js(drupal_get_path('module', 'gsb_feature_program_ct') . '/js/gsb_feature_program_ct.js');

  $form['title']['#title'] = 'Program Name';

  // show/hide the key image
  $form['field_image_key_image']['#states'] = array(
    'visible' => array(
      ':input[name="field_program_detail[' . $language . ']"]' => array(
        array('value' => '0'),
      ),
    ),
  );

  $form['field_additional_pages'][$language][0]['#title'] = '';
  unset($form['field_additional_pages'][$language][0]['field_page_link'][$language][0]['#title']);

  // hide the n/a option for field_program_contact_options radio buttons
  unset($form['field_program_contact_options']['und']['#options']['_none']);

  // show/hide the program contact fields based on field_program_contact_options value
  $form['field_program_director_name']['#states'] = array(
    'visible' => array(
      ':input[name="field_program_contact_options[' . $language . ']"]' => array(
        array('value' => 'display_a_person'),
      ),
    ),
    'required' => array(
      ':input[name="field_program_contact_options[' . $language . ']"]' => array(
        array('value' => 'display_a_person'),
      ),
    ),
  );
  $form['field_program_contact_link']['#states'] = array(
    'visible' => array(
      ':input[name="field_program_contact_options[' . $language . ']"]' => array(
        array('value' => 'link_to_page'),
      ),
    ),
    'required' => array(
      ':input[name="field_program_contact_options[' . $language . ']"]' => array(
        array('value' => 'link_to_page'),
      ),
    ),
  );

  // hide the n/a option for field_image_or_video radio buttons
  unset($form['field_image_or_video'][$language]['#options']['_none']);

  // show/hide the image or video fields based on field_image_or_video value
  $form['field_learn_more_photo']['#states'] = array(
    'visible' => array(
      ':input[name="field_image_or_video[' . $language . ']"]' => array(
        array('value' => 'Image'),
      ),
    ),
  );
  unset($form['field_learn_more_video_title']);
  unset($form['field_video_description']);
  unset($form['field_video_url']);
  $form['field_video'][$language][0]['field_title'][$language]['#required'] = 0;
  $form['field_video'][$language][0]['field_title'][$language][0]['#required'] = 0;
  $form['field_video'][$language][0]['field_title'][$language][0]['value']['#required'] = 0;
  unset($form['field_video']['und'][0]['remove_button']);
  unset($form['field_video']['und']['add_more']);
  $form['field_video']['#states'] = array(
    'visible' => array(
      ':input[name="field_image_or_video[' . $language . ']"]' => array(
        array('value' => 'Video'),
      ),
    ),
  );

  $form['field_link_single']['#states'] = array(
    'visible' => array(
      ':input[name="field_program_detail[' . $language . ']"]' => array(
        array('value' => '1'),
      ),
    ),
  );

  $form['field_overview_description']['#states'] = array(
    'invisible' => array(
      ':input[name="field_program_detail[' . $language . ']"]' => array(
        array('value' => '1'),
      ),
    ),
  );
  $form['field_key_benefits_description']['#states'] = array(
    'invisible' => array(
      ':input[name="field_program_detail[' . $language . ']"]' => array(
        array('value' => '1'),
      ),
    ),
  );

  $form['field_brochure_pdf'][$language][0]['#description'] = '';

  if ($form['field_brochure_options']['und']['#default_value'] == null) {
    $form['field_brochure_options']['und']['#default_value'] = 'no_brochure_download';
  }

  // Remove the n/a option for brochure options radio buttons
  unset($form['field_brochure_options'][$language]['#options']['_none']);

  // Visible state settings for the Brochure PDF upload and link fields

  $form['field_brochure_pdf']['#states'] = array(
    'invisible' => array(
      ':input[name="field_brochure_options[' . $language . ']"],value="brochure_link_pdf"' => array(
        '!value' => 'brochure_link_pdf',
      ),
      ':input[name="field_brochure_options[' . $language . ']"],value="brochure_link_ee_lead_form"' => array(
        '!value' => 'brochure_link_ee_lead_form',
      )
    ),
  );
  // 'value' => 'brochure_link_ee_lead_form',
  $form['field_download_brochure_link']['#states'] = array(
    'visible' => array(
      ':input[name="field_brochure_options[' . $language . ']"]' => array(
        'value' => 'brochure_link_other',
      )
    ),
  );

  // set the Edit Curriculum Page markup
  if (!empty($form['#node'])) {
    $edit_path = _gsb_feature_program_ct_create_ppp_path($form['#node'], 'curriculum');
    $edit_path = drupal_lookup_path('source', $edit_path);
    if ($edit_path) {
      $edit_path = $edit_path . '/edit';
      $form['field_edit_curriculum_page'][$language][0]['markup']['#markup'] = '<a href="/' . $edit_path . '" target="_blank">' . t('Edit Curriculum Page') . '</a>';
    }
    else {
      unset($form['field_edit_curriculum_page']);
    }
  }

  // set the Edit Participants Page markup
  if (!empty($form['#node'])) {
    $edit_path = _gsb_feature_program_ct_create_ppp_path($form['#node'], 'participant');
    $edit_path = drupal_lookup_path('source', $edit_path);
    if ($edit_path) {
      $edit_path = $edit_path . '/edit';
      $form['field_edit_participants_page'][$language][0]['markup']['#markup'] = '<a href="/' . $edit_path . '" target="_blank">' . t('Edit Participants Page') . '</a>';
    }
    else {
      unset($form['field_edit_participants_page']);
    }
  }

}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function gsb_feature_program_ct_field_widget_link_field_form_alter(&$element, &$form_state, $context) {
  if ($context['instance']['field_name'] == 'field_page_link') {
    $element['#after_build'][] = 'gsb_feature_program_instance_ct_program_page_link_after_build';
  }
}


/**
 * #after_build callback for changing the link widget text for the program page link.
 */
function gsb_feature_program_instance_ct_program_page_link_after_build($element, &$form_state) {
  $element['title']['#title'] = t('Page Title');
  return $element;
}

/**
 * Implements hook_node_insert().
 */
function gsb_feature_program_ct_entity_insert($node, $type) {
  if ($type == 'node') {
    _gsb_feature_program_ct_node_save($node);
  }
}

/**
 * Implements hook_node_update().
 */
function gsb_feature_program_ct_entity_update($node, $type) {
  if ($type == 'node') {
    _gsb_feature_program_ct_node_save($node);
  }
}

/**
 * Helper for hook_node_insert() and hook_node_update().
 */
function _gsb_feature_program_ct_node_save($node) {

  if ($node->type != 'program') {
    return;
  }
  if ($node->path['alias'] == '') {
    return;
  }

  _gsb_feature_program_ct_create_ppp($node, 'curriculum');
  _gsb_feature_program_ct_create_ppp($node, 'faculty');
  _gsb_feature_program_ct_create_ppp($node, 'participant');

  //if ($node->field_program_small_teams['und'][0]['value'] == '1') {
    //_gsb_feature_program_ct_create_ppp($node, 'team');
  //}

}

function _gsb_feature_program_ct_create_ppp($node, $ppp_type) {

  $ppp_node = new stdClass();  // Create a new node object
  $ppp_node->type = 'program_panelized_page';  // Content type
  $ppp_node->language = LANGUAGE_NONE;
  node_object_prepare($ppp_node);  //Set some default values

  $ppp_node->title = $node->title . ' --- ' . $ppp_type;

  $ppp_node->status = 1;   // (1 or 0): published or unpublished
  $ppp_node->promote = 0;  // (1 or 0): promoted to front page or not
  $ppp_node->sticky = 0;   // (1 or 0): sticky at top of lists or not
  $ppp_node->comment = 0;  // 2 = comments open, 1 = comments closed, 0 = comments hidden

  // Add author of the node
  $ppp_node->uid = 1;

  $path = _gsb_feature_program_ct_create_ppp_path($node, $ppp_type);
  $ppp_node->path = array(
    'alias' => $path,
    'pathauto' => 0
  );

  $path = drupal_lookup_path("source", $path);
  $found_node = menu_get_object("node", 1, $path);

  if (!$found_node) {
    // Save the new Program Panelized Page node
    node_save($ppp_node);
    // Resave the Program Panelized Page node
    // With the in-place editor option
    $ppp_node = node_load($ppp_node->nid);
    $ppp_node->field_program['und'][0]['target_id'] = $node->nid;
    $ppp_node->panelizer['page_manager']->pipeline = 'ipe';
    node_save($ppp_node);
  }

}

function _gsb_feature_program_ct_create_ppp_path($node, $ppp_type) {
  $language = $node->language;

  if (empty($node->nid)) {
    return '';
  }

  $program_path_alias = $node->path['alias'];
  $program_path_alias_title = explode('/', $program_path_alias);
  $program_path_alias_title = $program_path_alias_title[sizeof($program_path_alias_title) - 1];

  $tid = $node->field_program_category[$language][0]['tid'];
  $term = taxonomy_term_load($tid);
  $program_base = $term->field_program_listing_page_url[$language][0]['url'];
  if (strpos($program_base, '/') == 0) {
    $program_base = ltrim($program_base, '/');
  }

  $path = $program_base . '/' . $program_path_alias_title . '/' . $ppp_type;

  return $path;
}

/**
 * Implementation of hook_block_info()
 *
 */
function gsb_feature_program_ct_block_info() {
  return array(
    'program_menu' => array(
      'info' => t('Program Menu'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    ),
    'ee_section_header' => array(
      'info' => t('EE Section Header'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    ),
    'ee_section_apply_brochure' => array(
      'info' => t('EE Section Apply and Brochure'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    )
  );
}

/**
 * Implementation of hook_block_view
 *
 * Define callbacks for block display
 *
 */
function gsb_feature_program_ct_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'program_menu':
      $block['content'] = theme('gsb_feature_program_ct_program_menu');
      break;
    case 'ee_section_header':
      $block['content'] = theme('gsb_feature_program_ct_ee_section_header');
      break;
    case 'ee_section_apply_brochure':
      $block['content'] = theme('gsb_feature_program_ct_ee_section_apply_brochure');
      break;
  }
  return $block;
}

/**
 * Implements hook_theme().
 *
 * Define custom theme hooks
 */
function gsb_feature_program_ct_theme($existing, $type , $theme, $path) {
  return array(
    'gsb_feature_program_ct_program_menu' => array(
      'template' => 'templates/gsb-feature-program-ct-program-menu',
      'file' => 'program_menu.theme.inc',
    ),
    'gsb_feature_program_ct_ee_section_header' => array(
      'template' => 'templates/gsb-feature-program-ct-ee-section-header',
      'file' => 'ee_section_header.theme.inc',
    ),
    'gsb_feature_program_ct_ee_section_apply_brochure' => array(
      'template' => 'templates/gsb-feature-program-ct-ee-section-apply-brochure',
      'file' => 'ee_section_apply_brochure.theme.inc',
    )
  );
}

/**
 * Implements hook_field_extra_fields().
 */
function gsb_feature_program_ct_field_extra_fields() {
  $extra = array();
  $extra['node']['program']['display'] = array(
    'gsb_program_explore_more' => array(
      'label' => t('Explore Other Programs'),
      'description' => t('Programs with same Career Levels and Key Topics'),
      'weight' => 0,
    ),
    'gsb_program_program_instance_fields' => array(
      'label' => t('Program Instance Fields'),
      'description' => t('Renders the program instance fields.'),
      'weight' => 0,
    ),
    'gsb_program_program_instance_faculty_fields' => array(
      'label' => t('Program Instance Faculty Fields'),
      'description' => t('Renders the program instance faculty fields.'),
      'weight' => 0,
    ),
    'gsb_program_curriculum_blurb' => array(
      'label' => t('Curriculum Blurb'),
      'description' => t('Renders the curriculum blurb.'),
      'weight' => 0,
    ),
    'gsb_program_participant_profile_blurb' => array(
      'label' => t('Participant Profile Blurb'),
      'description' => t('Renders the participant profile blurb.'),
      'weight' => 0,
    ),
    'gsb_program_application_requirements_blurb' => array(
      'label' => t('Application Requirements Blurb'),
      'description' => t('Renders the application_requirements blurb.'),
      'weight' => 0,
    ),
    'gsb_program_topics_location_category' => array(
      'label' => t('Topics and Program Location Category'),
      'description' => t('Renders the topics and program location category.'),
      'weight' => 0,
    ),
    'gsb_program_show_all_programs' => array(
      'label' => t('Show All Programs CTA'),
      'description' => t('Renders the show all programs cta.'),
      'weight' => 0,
    ),
  );
  return $extra;
}

/**
 * Implements hook_entity_view().
 */
function gsb_feature_program_ct_entity_view($entity, $type, $view_mode, $langcode) {
  // Only go thru this code if we are working with a node
  if ($type != 'node') {
    return;
  }
  // Only go thru this code if we are working with a program node
  if ($entity->type != 'program') {
    return;
  }
  // Only go thru this code if the 'explore more' field is visible
  $fields = field_extra_fields_get_display('node', $entity->type, $view_mode);
  if (!empty($fields['gsb_program_explore_more']['visible'])) {
    gsb_feature_program_ct_explore_more($entity, $type, $view_mode, $langcode);
  }
  if (!empty($fields['gsb_program_program_instance_fields']['visible'])) {
    gsb_feature_program_ct_program_instance_fields($entity, $type, $view_mode, $langcode);
  }
  if (!empty($fields['gsb_program_program_instance_faculty_fields']['visible'])) {
    gsb_feature_program_ct_program_instance_faculty_fields($entity, $type, $view_mode, $langcode);
  }
  if (!empty($fields['gsb_program_curriculum_blurb']['visible'])) {
    gsb_feature_program_ct_curriculum_blurb($entity, $type, $view_mode, $langcode);
  }
  if (!empty($fields['gsb_program_participant_profile_blurb']['visible'])) {
    gsb_feature_program_ct_participant_profile_blurb($entity, $type, $view_mode, $langcode);
  }
  if (!empty($fields['gsb_program_application_requirements_blurb']['visible'])) {
    gsb_feature_program_ct_application_requirements_blurb($entity, $type, $view_mode, $langcode);
  }
  if (!empty($fields['gsb_program_topics_location_category']['visible'])) {
    gsb_feature_program_ct_topics_location_category($entity, $type, $view_mode, $langcode);
  }
  if (!empty($fields['gsb_program_show_all_programs']['visible'])) {
    gsb_feature_program_ct_show_all_programs($entity, $type, $view_mode, $langcode);
  }
}

/**
 * Implements hook_entity_view().
 */
function gsb_feature_program_ct_explore_more($entity, $type, $view_mode, $langcode) {

  // Only go thru this code if we are working with a node
  if ($type != 'node') {
    return;
  }
  // Only go thru this code if we are working with a program node
  if ($entity->type != 'program') {
    return;
  }
  // Only go thru this code if the 'explore more' field is visible
  $fields = field_extra_fields_get_display('node', $entity->type, $view_mode);
  if (empty($fields['gsb_program_explore_more']['visible'])) {
    return;
  }

  // Get the list of career level tids
  $wrapper = entity_metadata_wrapper($type, $entity);
  $tids = array();
  foreach ($wrapper->field_career_level as $term) {
    if ($term->value()) {
      $tids[] = $term->value()->tid;
    }
  };

  // Get the list of key program topics tids
  $wrapper = entity_metadata_wrapper($type, $entity);
  $ktids = array();
  foreach ($wrapper->field_key_program_topics as $term) {
    if ($term->value()) {
      $ktids[] = $term->value()->tid;
    }
  };

  $nid = $entity->nid;

  // Run a query to find other programs that have key topics and career levels
  // like the program node we are viewing
  $query = db_select('node', 'n');
  $query->fields('n', array('nid', 'status', 'type', 'created'));
  $query->join('field_data_field_career_level', 'cl', "n.nid = cl.entity_id AND cl.entity_type = 'node'");
  $query->join('taxonomy_term_data', 't', "t.tid = cl.field_career_level_tid");
  $query->join('field_data_field_key_program_topics', 'kpt', "n.nid = kpt.entity_id AND kpt.entity_type = 'node'");
  $query->fields('kt', array('tid'));
  $query->join('taxonomy_term_data', 'kt', "kt.tid = kpt.field_key_program_topics_tid");
  $query->condition('n.nid', $nid, '<>');
  $query->condition('n.type', 'program');
  $query->condition('n.status', '1');
  if (!empty($tids)) {
    $query->condition('t.tid', $tids, 'IN');
  }
  if (!empty($ktids)) {
    $query->condition('kt.tid', $ktids, 'IN');
  }
  $query->orderBy('created', 'DESC');
  $query->orderBy('nid', 'DESC');
  $results = $query->execute();

  // Get the counts of programs that have more than one match
  $programs = array();
  foreach ($results as $record) {
    $programs[$record->nid] = (empty($programs[$record->nid])) ? 1 : $programs[$record->nid] + 1;
  }
  // Sort descending so we can find the programs with the most matches
  arsort($programs);
  // Only keep the top 3
  $programs = array_slice($programs, 0, 3, TRUE);

  if (empty($programs)) {
    return;
  }

  // Next look-up the most current program instances related to each of these programs
  $program_instances = _gsb_feature_program_ct_get_current_program_instances(array_keys($programs));

  // Render the top 3 matching programs instances in the 'expore more' wrapper
  if (!empty($program_instances)) {

    $nodes = node_load_multiple(array_values($program_instances));
    $content = node_view_multiple($nodes, 'program_explore_other');

    // Wrap content in container.
    $content_wrapper = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('explore-more-content'),
      ),
    );
    $content_wrapper['content'] = $content;

    // Wrap content and title in container.
    $container = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('gsb-program-explore-more-wrapper'),
      ),
    );
    $container['content'] = $content_wrapper;

    $entity->content['gsb_program_explore_more'] = $container;
  }

}

/**
 * Implements hook_entity_view().
 */
function gsb_feature_program_ct_program_instance_fields($entity, $type, $view_mode, $langcode) {

  // Only go thru this code if we are working with a node
  if ($type != 'node') {
    return;
  }
  // Only go thru this code if we are working with a program node
  if ($entity->type != 'program') {
    return;
  }
  // Only go thru this code if the 'explore more' field is visible
  $fields = field_extra_fields_get_display('node', $entity->type, $view_mode);
  if (empty($fields['gsb_program_program_instance_fields']['visible'])) {
    return;
  }

  drupal_add_js(drupal_get_path('module', 'gsb_feature_program_ct') . '/js/gsb_feature_program_ct.js');

  $nid = $entity->nid;
  $language = $entity->language;

  // Lookup the program instances for this program
  $program_instance_nids = _gsb_feature_program_ct_get_all_program_instances(array($nid));

  $node_wrapper = entity_metadata_wrapper('node', $nid);

  // get listing page url from program's program category
  $program_category = $node_wrapper->field_program_category->value();
  $program_listing_page_url = '';
  if (!empty($program_category->field_program_listing_page_url[$language][0]['url'])) {
    $program_listing_page_url = $program_category->field_program_listing_page_url[$language][0]['url'];
  }

  $topics = array();
  $locations = array();

  $program_instance_markups = array();
  foreach ($program_instance_nids as $pi_nid) {

    $instance_wrapper = entity_metadata_wrapper('node', $pi_nid);

    // get instance label
    $instance_label = $instance_wrapper->field_instance_label->value();

    // get instance date
    $instance_date = $instance_wrapper->field_instance_date->value();
    $start_date = new DateTime($instance_date['value']);
    $formatted_date = $start_date->format('d M Y');
    if (!empty($instance_date['value2'])) {
      $end_date = new DateTime($instance_date['value2']);
      $formatted_date = $formatted_date . ' – ' . $end_date->format('d M Y');
    }

    // add instance header (label and date) markup as -first item-
    $instance_hdr = '<h2 class="instance-header">';
    if (!empty($instance_label)) {
      $instance_hdr .= $instance_label;
    }
    if (!empty($formatted_date)) {
      if (!empty($instance_label)) {
        $instance_hdr .= '<span class="pipe">|</span>';
      }
      $instance_hdr .= $formatted_date;
    }
    $instance_hdr .= '</h2>';
    $program_instance_markups[$pi_nid][] = $instance_hdr;

    $program_instance_markups[$pi_nid][] = '<div class="group-left">';
    $program_instance_markups[$pi_nid][] = '<div class="instance-item-wrapper format-wrapper">';
    $program_instance_markups[$pi_nid][] = '<h3>Format</h3>';

    // add program format markup
    $program_format_location = $instance_wrapper->field_program_location->value();
    $ewrap_format_location = entity_metadata_wrapper('field_collection_item', $program_format_location);
    $program_format = $ewrap_format_location->field_program_format->value();
    $program_location = $ewrap_format_location->field_program_location_link->value();
    $program_format_out = '<div class="program-format-location">';
    if (!empty($program_format->name)) {
      $program_format_out .= $program_format->name;
    }
    if (!empty($program_location['title'])) {
      if (!empty($program_format->name)) {
        $program_format_out .= '<span class="pipe">|</span>';
      }
      $location = $program_location['title'];
      if (!empty($program_location['url'])) {
        $program_location['attributes']['target'] = $program_location['attributes']['target'] == 0 ? '' : $program_location['attributes']['target'];
        $location = l($program_location['title'], $program_location['url'], array('attributes' => $program_location['attributes']));
      }
      $program_format_out .= $location;
    }
    $program_format_out .= '</div>';
    $program_instance_markups[$pi_nid][] = $program_format_out;

    // add time commitment markup
    $time_commitment = $node_wrapper->field_time_commitment->value();
    $program_instance_markups[$pi_nid][] = '<div class="time-commitment">' . $time_commitment->name . '</div>';
    $program_instance_markups[$pi_nid][] = '</div>';

    // add program schedule markup
    $program_schedule = $instance_wrapper->field_program_schedule->value();

    if ($program_schedule && !empty($program_schedule[0]->field_program_date)) {

      $program_instance_markups[$pi_nid][] = '<div class="instance-item-wrapper schedule-wrapper">';
      $program_instance_markups[$pi_nid][] = '<h3>' . t('Program Schedule') . '</h3>';

      foreach ($program_schedule as $ps) {
        $ewrap_schedule = entity_metadata_wrapper('field_collection_item', $ps);
        $schedule_body = $ewrap_schedule->field_body->value();
        $program_date = $ewrap_schedule->field_program_date->value();
        $formatted_date = '';
        if ($program_date) {
          $start_date = new DateTime($program_date['value']);
          $formatted_date = $start_date->format('d M Y');
          if (!empty($program_date['value2'])) {
            $end_date = new DateTime($program_date['value2']);
            $formatted_date = $formatted_date . ' – ' . $end_date->format('d M Y');
          }
        }
        $program_instance_markups[$pi_nid][] = '<div class="schedule-item-wrapper">';
        if (!empty($formatted_date)) {
          $program_instance_markups[$pi_nid][] = '<div class="program-schedule-date">' . $formatted_date . '</div>';
        }
        $program_instance_markups[$pi_nid][] = '<div class="program-schedule-description">' . $schedule_body . '</div>';
        $program_instance_markups[$pi_nid][] = '</div>';
      }

      $program_instance_markups[$pi_nid][] = '</div>';
    }

    // add app_requirements_url markup from program
    $app_requirements_link = $node_wrapper->field_application_requirements->value();
    if ($app_requirements_link) {

      // build the Application Requirements link
      $link = array();
      $link['text'] = t('Application Requirements');
      $link['path'] = $app_requirements_link['url'];
      $link['options']['attributes'] = $app_requirements_link['attributes'];
      $link['options']['html'] = null;

      $program_instance_markups[$pi_nid][] = '<div class="instance-item-wrapper application-wrapper">';
      $program_instance_markups[$pi_nid][] = '<h3 class="app-requirements-link">' . theme('link', $link) . '</h3>';
      $program_instance_markups[$pi_nid][] = '<div class="program-deadline-wrapper">';
      $program_instance_markups[$pi_nid][] = '<h4 class="deadline-header">Deadline</h4>';

      // add program application deadline markup
      $program_deadline = $instance_wrapper->field_application_deadlines->value();
      foreach($program_deadline as $pd) {
        $ewrap_deadline = entity_metadata_wrapper('field_collection_item', $pd);
        $deadline_text = $ewrap_deadline->field_deadline_text->value();
        $deadline_date = $ewrap_deadline->field_date->value();
        $formatted_date = '';
        if ($deadline_date) {
          $start_date = DateTime::createFromFormat('U', $deadline_date);
          $formatted_date = $start_date->format('d M Y');
        }
        $deadline = '<div class="program-deadline">';
        if (!empty($deadline_text)) {
          $deadline .= $deadline_text;
        }
        if (!empty($formatted_date)) {
          if (!empty($deadline_text)) {
            $deadline .= '<span class="pipe">|</span>';
          }
          $deadline .= $formatted_date;
        }
        $deadline .= '</div>';
        $program_instance_markups[$pi_nid][] = $deadline;
      }

      $program_instance_markups[$pi_nid][] = '</div>';
      $program_instance_markups[$pi_nid][] = '</div>';
    }

    $program_instance_markups[$pi_nid][] = '</div>';

    $program_instance_markups[$pi_nid][] = '<div class ="group-right">';
    $program_instance_markups[$pi_nid][] = '<div class="instance-item-wrapper tuition-wrapper">';
    $program_instance_markups[$pi_nid][] = '<h3>Program Tuition</h3>';

    // add tuition amount markup
    $tuition = $instance_wrapper->field_tuition->value();
    $tuition_markup = '<div class="tuition-amount">';
    if (!empty($tuition['url'])) {
      $tuition['attributes']['target'] = $tuition['attributes']['target'] == 0 ? '' : $tuition['attributes']['target'];
      $tuition_markup .= l($tuition['title'], $tuition['url'], array('attributes' => $tuition['attributes']));
    }
    else {
      $tuition_markup .= $tuition['title'];
    }
    $tuition_markup .= '</div>';
    $program_instance_markups[$pi_nid][] = $tuition_markup;

    // add included in tuition markup
    $included_in_tuition = $instance_wrapper->field_included_in_tuition->value();
    $program_instance_markups[$pi_nid][] = '<div class="included-in-tuition">' . $included_in_tuition['safe_value'] . '</div>';

    // add optional programming markup
    $optional_programming = $instance_wrapper->field_optional_programming->value();
    if ($optional_programming) {
      $program_instance_markups[$pi_nid][] = '<div class="optional-programing">' . $optional_programming['safe_value'] . '</div>';
    }

    // add payment cancellation markup
    $payment_cancellation = $instance_wrapper->field_payment_cancellation->value();
    if ($payment_cancellation) {
      $program_instance_markups[$pi_nid][] =
        '<div class="payment-cancellation">' .
          '<a href="' . $payment_cancellation['url'] . '">' . t('Learn more about payment, financial aid, and cancellation policies') . '</a>' .
        '</div>';
    }
    $program_instance_markups[$pi_nid][] = '</div>';

    // seek in a couple program fields
    // add awarded_upon_completion markup from program
    $awarded_upon_completion = $node_wrapper->field_awarded_upon_completion->value();
    if ($awarded_upon_completion) {
      $program_instance_markups[$pi_nid][] = '<div class="instance-item-wrapper awarded-wrapper">';
      $program_instance_markups[$pi_nid][] = '<h3>Awarded</h3>';
      $program_instance_markups[$pi_nid][] = '<div class="awarded-upon-completion">' . $awarded_upon_completion . '</div>';
      $program_instance_markups[$pi_nid][] = '</div>';
    }

    // add program topics from program - to the topics array
    $program_topics = $node_wrapper->field_program_topics->value();
    foreach($program_topics as $pt) {
      $topics[] = $pt;
    }

    // add program location from program instance - to the program locations array
    $program_location_categories = $ewrap_format_location->field_program_location_category->value();
    $locations[] = $program_location_categories;

    $program_instance_markups[$pi_nid][] = '</div>';

  }

  // Wrap content and title in container.
  $container = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('gsb-program-program-instance-fields'),
    ),
  );

  $instance_wrappers = array();

  foreach ($program_instance_markups as $pi_markup) {

    // Wrap content in container.
    $content_wrapper = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('instance-wrapper'),
      ),
    );

    // get the header as the first item in the list of markup
    $header = array_shift($pi_markup);

    $show_info = '';
    if (count($program_instance_nids) > 1) {
      $show_info = '<span class="instance-show-information">' . t('Show Program Information') . '</span>';
    }

    $content_wrapper['content'] = array('#markup' =>
      $header .
      $show_info .
      '<div class="instance-information">' .
      implode(" ", $pi_markup) .
      '</div>'
    );

    $instance_wrappers['content'][] = $content_wrapper;

  }

  // create the topics markup
  $topic_names = array();
  foreach($topics as $delta => $item) {
    $topic_names[] = $item->name;
  }
  $topic_names = array_unique($topic_names);
  asort($topic_names);
  $topic_names = array_values($topic_names);
  $topics_markup = '';
  $count = count($topic_names);
  foreach($topic_names as $delta => $item) {
    $path = $program_listing_page_url . '?program-topic=' . str_replace(' ', '-', strtolower($item));
    $topics_markup .= '<a href="' . base_path() . $path . '">' . check_plain($item) . '</a>';
    if ($delta != $count - 1) {
      $topics_markup .= '<span class="separator">' . check_plain(', ') . '</span>';
    }
  }

  // create the locations markup
  $location_names = array();
  foreach($locations as $delta => $item) {
    $location_names[] = $item->name;
  }
  $location_names = array_unique($location_names);
  asort($location_names);
  $location_names = array_values($location_names);
  $locations_markup = '';
  $count = count($location_names);
  foreach($location_names as $delta => $item) {
    $name = str_replace(' ', '-', strtolower($item));
    $name = str_replace('(', '', $name);
    $name = str_replace(')', '', $name);
    $name = str_replace('.', '', $name);
    $path = $program_listing_page_url . '?program-location=' . $name;
    $locations_markup .= '<a href="' . base_path() . $path . '">' . check_plain($item) . '</a>';
    if ($delta != $count - 1) {
      $locations_markup .= '<span class="separator">' . check_plain(', ') . '</span>';
    }
  }

  // create the program category markup
  $path = $program_listing_page_url;
  $program_category_markup = array();
  $program_category_markup[] = '<a href="' . base_path() . $path . '">' . $program_category->name . '</a>';

  // Wrap a taxonomy container around the topics and program location links

  $topics_locations_markup = $topics_markup;
  if (!empty($topics_markup)) {
    $topics_locations_markup .= '<span class="separator">' . check_plain(', ') . '</span>';
  }
  $topics_locations_markup .= $locations_markup;

  $taxonomy_wrapper = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('instance-taxonomy'),
    ),
    'content' => array('#markup' => $topics_locations_markup)
  );

  $instance_wrappers['content'][] = $taxonomy_wrapper;

  $container['content'] = $instance_wrappers;

  $entity->content['gsb_program_program_instance_fields'] = $container;

}

/**
 * Implements hook_entity_view().
 */
function gsb_feature_program_ct_program_instance_faculty_fields($entity, $type, $view_mode, $langcode) {

  // Only go thru this code if we are working with a node
  if ($type != 'node') {
    return;
  }
  // Only go thru this code if we are working with a program node
  if ($entity->type != 'program') {
    return;
  }
  // Only go thru this code if we are working with view mode full
  if ($view_mode != 'full') {
    return;
  }

  // Only go thru this code if the 'explore more' field is visible
  $fields = field_extra_fields_get_display('node', $entity->type, $view_mode);
  if (empty($fields['gsb_program_program_instance_faculty_fields']['visible'])) {
    return;
  }

  $nid = $entity->nid;
  $language = $entity->language;

  // Lookup the program instances for this program
  $query = db_select('node', 'n');
  $query->fields('n', array('nid', 'status', 'type'));
  $query->join('field_data_field_program', 'fp', "n.nid = fp.entity_id AND fp.entity_type = 'node' AND fp.deleted = '0'");
  $query->fields('fp', array('entity_id', 'entity_type', 'deleted', 'field_program_target_id'));
  $query->join('node', 'nodefp', 'fp.field_program_target_id = nodefp.nid');
  $query->fields('nodefp', array('nid'));
  $query->join('field_data_field_instance_date', 'fid', "n.nid = fid.entity_id AND fid.entity_type = 'node' AND fid.deleted = '0'");
  $query->fields('fid', array('field_instance_date_value'));
  $query->join('field_data_field_display_on_finder', 'dof', "n.nid = dof.entity_id AND dof.entity_type = 'node' AND dof.deleted = '0'");
  $query->fields('dof', array('field_display_on_finder_value'));
  $query->condition('nodefp.nid', $nid);
  $query->condition('n.status', '1');
  $query->condition('n.type', 'program_instance');
  $query->condition('dof.field_display_on_finder_value', '1');
  $query->orderBy('fid.field_instance_date_value', 'DESC');
  $query->range(0,1);
  $results = $query->execute();

  $faculty_directors = array();
  foreach ($results as $record) {
    $instance_wrapper = entity_metadata_wrapper('node', $record->nid);
    foreach ($instance_wrapper->field_faculty_directors as $key => $fci) {
      $view = $fci->view('faculty_leadership');
      $id = $fci->getIdentifier();
      if (isset($view['field_collection_item'][$id])) {
        $faculty_directors[$id] = $view['field_collection_item'][$id];
        $faculty_directors[$id]['#weight'] = $key;
      }
    }
  }
  if (!empty($faculty_directors)) {
    $entity->content['gsb_program_program_instance_faculty_fields'] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array(
          'faculty-leadership-wrapper',
          ),
        ),
      ) + $faculty_directors;

    // $entity->content['gsb_program_program_instance_faculty_fields'] = $faculty_directors;
  }
}

/**
 * Implements hook_entity_view().
 */
function gsb_feature_program_ct_curriculum_blurb($entity, $type, $view_mode, $langcode) {
  // Only go thru this code if we are working with a node
  if ($type != 'node') {
    return;
  }
  // Only go thru this code if we are working with a program node
  if ($entity->type != 'program') {
    return;
  }
  // Only go thru this code if we are working with view mode full
  if ($view_mode != 'full') {
    return;
  }

  $nid = $entity->nid;
  $language = $entity->language;

  $node_wrapper = entity_metadata_wrapper('node', $nid);

  // get listing page url from program's program category
  $program_category = $node_wrapper->field_program_category->value();

  // Wrap content in container.
  $content_wrapper = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('curriculum-blurb-wrapper'),
    ),
  );

  $blurb_markup = '<div class="curriculum-blurb">';
  $blurb_markup .= empty($program_category->field_curriculum_blurb[$language]) ? '' : $program_category->field_curriculum_blurb[$language][0]['safe_value'];
  $blurb_markup .= '</div>';
  $content_wrapper['content'] = array('#markup' => $blurb_markup);

  $entity->content['gsb_program_curriculum_blurb'] = $content_wrapper;
}

/**
 * Implements hook_entity_view().
 */
function gsb_feature_program_ct_participant_profile_blurb($entity, $type, $view_mode, $langcode) {
  // Only go thru this code if we are working with a node
  if ($type != 'node') {
    return;
  }
  // Only go thru this code if we are working with a program node
  if ($entity->type != 'program') {
    return;
  }
  // Only go thru this code if we are working with view mode full
  if ($view_mode != 'full') {
    return;
  }

  $nid = $entity->nid;
  $language = $entity->language;

  $node_wrapper = entity_metadata_wrapper('node', $nid);

  // get listing page url from program's program category
  $program_category = $node_wrapper->field_program_category->value();

  // Wrap content in container.
  $content_wrapper = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('participant-profile-blurb-wrapper'),
    ),
  );

  $blurb_markup = '<div class="participant-profile-blurb">';
  $blurb_markup .= empty($program_category->field_participant_profile_blurb[$language]) ? '' : $program_category->field_participant_profile_blurb[$language][0]['safe_value'];
  $blurb_markup .= '</div>';
  $content_wrapper['content'] = array('#markup' => $blurb_markup);

  $entity->content['gsb_program_participant_profile_blurb'] = $content_wrapper;
}

/**
 * Implements hook_entity_view().
 */
function gsb_feature_program_ct_application_requirements_blurb($entity, $type, $view_mode, $langcode) {
  // Only go thru this code if we are working with a node
  if ($type != 'node') {
    return;
  }
  // Only go thru this code if we are working with a program node
  if ($entity->type != 'program') {
    return;
  }
  // Only go thru this code if we are working with view mode full
  if ($view_mode != 'full') {
    return;
  }

  $nid = $entity->nid;
  $language = $entity->language;

  $node_wrapper = entity_metadata_wrapper('node', $nid);

  // get listing page url from program's program category
  $program_category = $node_wrapper->field_program_category->value();

  // Wrap content in container.
  $content_wrapper = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('application-requirements-blurb-wrapper'),
    ),
  );

  $blurb_markup = '<div class="application-requirements-blurb">';
  $blurb_markup .= empty($program_category->field_application_requirements_b[$language]) ? '' : $program_category->field_application_requirements_b[$language][0]['safe_value'];
  $blurb_markup .= '</div>';
  $content_wrapper['content'] = array('#markup' => $blurb_markup);

  $entity->content['gsb_program_application_requirements_blurb'] = $content_wrapper;
}

/**
 * Implements hook_entity_view().
 */
function gsb_feature_program_ct_topics_location_category($entity, $type, $view_mode, $langcode) {
  // Only go thru this code if we are working with a node
  if ($type != 'node') {
    return;
  }
  // Only go thru this code if we are working with a program node
  if ($entity->type != 'program') {
    return;
  }
  // Only go thru this code if we are working with view mode full
  if ($view_mode != 'full') {
    return;
  }

  $nid = $entity->nid;
  $language = $entity->language;

  $node_wrapper = entity_metadata_wrapper('node', $nid);

  $program_instances = _gsb_feature_program_ct_get_all_program_instances(array($nid));

  // get listing page url from program's program category
  $program_category = $node_wrapper->field_program_category->value();
  $program_listing_page_url = '';
  if (!empty($program_category->field_program_listing_page_url[$language][0]['url'])) {
    $program_listing_page_url = $program_category->field_program_listing_page_url[$language][0]['url'];
  }

  // get program's topics
  $program_topics = $node_wrapper->field_program_topics->value();

  $topics = array();
  foreach( $program_topics as $item) {
    $topics[] = $item->name;
  }

  // create the topics markup
  $topics_markup = array();
  $count = count($topics);
  foreach($topics as $delta => $item) {
    $path = $program_listing_page_url . '?program-topic=' . str_replace(' ', '-', strtolower($item));
    $topics_markup[] = '<a href="' . base_path() . $path . '">' . check_plain($item) . '</a>';
    if ($delta != $count - 1) {
      $topics_markup[] = '<span class="separator">' . check_plain(', ') . '</span>';
    }
  }

  $location_categories = array();
  foreach ($program_instances as $pi_nid) {
    $instance_wrapper = entity_metadata_wrapper('node', $pi_nid);
    $program_location = $instance_wrapper->field_program_location->value();
    $ewrap_location = entity_metadata_wrapper('field_collection_item', $program_location);
    $program_location_category = $ewrap_location->field_program_location_category->value();
    $location_categories[] = $program_location_category->name;
  }

  // create the program category markup
  $location_categories_markup = array();
  $count = count($location_categories);
  foreach($location_categories as $delta => $item) {
    $name = str_replace(' ', '-', strtolower($item));
    $name = str_replace('(', '', $name);
    $name = str_replace(')', '', $name);
    $path = $program_listing_page_url . '?program-location=' . $name;
    $location_categories_markup[] = '<a href="' . base_path() . $path . '">' . $item . '</a>';
    if ($delta != $count - 1) {
      $location_categories_markup[] = '<span class="separator">' . check_plain(', ') . '</span>';
    }
  }

  // Wrap content in container.
  $content_wrapper = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('topics-location-category-wrapper'),
    ),
  );

  $topics_location_categories_markup = array();
  if (!empty($topics_markup)) {
    $topics_location_categories_markup[] = implode('', $topics_markup);
  }
  if (!empty($location_categories_markup)) {
    if (!empty($topics_markup)) {
      $topics_location_categories_markup[] = '<span class="separator">' . check_plain(', ') . '</span>';
    }
    $topics_location_categories_markup[] = implode('', $location_categories_markup);
  }

  $content_wrapper['content'] = array('#markup' =>
    '<div class=topics-location-category-">' .
      implode('', $topics_location_categories_markup) .
    '</div>'
  );

  $entity->content['gsb_program_topics_location_category'] = $content_wrapper;
}

/**
 * Implements hook_entity_view().
 */
function gsb_feature_program_ct_show_all_programs($entity, $type, $view_mode, $langcode) {
  // Only go thru this code if we are working with a node
  if ($type != 'node') {
    return;
  }
  // Only go thru this code if we are working with a program node
  if ($entity->type != 'program') {
    return;
  }
  // Only go thru this code if we are working with view mode full
  if ($view_mode != 'full') {
    return;
  }

  $nid = $entity->nid;
  $language = $entity->language;

  $node_wrapper = entity_metadata_wrapper('node', $nid);

  // get listing page url from program's program category
  $program_category = $node_wrapper->field_program_category->value();
  $program_listing_page_url = '';
  if (!empty($program_category->field_program_listing_page_url[$language][0]['url'])) {
    $program_listing_page_url = $program_category->field_program_listing_page_url[$language][0]['url'];
  }

  // Wrap content in container.
  $content_wrapper = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('program-programs-cta-wrapper'),
    ),
  );

  $programs_link = '<a href="' . base_path() . $program_listing_page_url . '">' . t('Show All Programs') . '</a>';

  $content_wrapper['content'] = array('#markup' =>
    '<div class="program-programs-cta">' .
      $programs_link .
    '</div>'
  );

  $entity->content['gsb_program_show_all_programs'] = $content_wrapper;
}

/**
 * Get all program instances related to each of these programs
 */
function _gsb_feature_program_ct_get_all_program_instances($program_nids) {

  $query = db_select('node', 'n');
  $query->fields('n', array('nid', 'status', 'type'));
  $query->join('field_data_field_program', 'fp', "n.nid = fp.entity_id AND fp.entity_type = 'node' AND fp.deleted = '0'");
  $query->fields('fp', array('entity_id', 'entity_type', 'deleted', 'field_program_target_id'));
  $query->join('node', 'nodefp', 'fp.field_program_target_id = nodefp.nid');
  $query->fields('nodefp', array('nid'));
  $query->join('field_data_field_instance_date', 'fid', "n.nid = fid.entity_id AND fid.entity_type = 'node' AND fid.deleted = '0'");
  $query->fields('fid', array('field_instance_date_value'));
  $query->join('field_data_field_display_on_finder', 'dof', "n.nid = dof.entity_id AND dof.entity_type = 'node' AND dof.deleted = '0'");
  $query->fields('dof', array('field_display_on_finder_value'));
  $query->condition('nodefp.nid', $program_nids, 'IN');
  $query->condition('n.status', '1');
  $query->condition('n.type', 'program_instance');
  $query->condition('dof.field_display_on_finder_value', '1');
  $query->orderBy('fid.field_instance_date_value', 'ASC');
  $results = $query->execute();

  $program_instances = array();
  foreach($results as $instance) {
    $program_instances[] = $instance->nid;
  }

  return $program_instances;
}

/**
 * Get the most current program instances related to each of these programs
 */
function _gsb_feature_program_ct_get_current_program_instances($program_nids) {

  $today = date('Y-m-d H:i:s', time());

  $query = db_select('node', 'n');
  $query->fields('n', array('nid', 'status', 'type'));
  $query->join('field_data_field_program', 'fp', "n.nid = fp.entity_id AND fp.entity_type = 'node' AND fp.deleted = '0'");
  $query->fields('fp', array('entity_id', 'entity_type', 'deleted', 'field_program_target_id'));
  $query->join('node', 'nodefp', 'fp.field_program_target_id = nodefp.nid');
  $query->fields('nodefp', array('nid'));
  $query->join('field_data_field_instance_date', 'fid', "n.nid = fid.entity_id AND fid.entity_type = 'node' AND fid.deleted = '0'");
  $query->fields('fid', array('field_instance_date_value'));
  $query->condition('nodefp.nid', $program_nids, 'IN');
  $query->condition('n.status', '1');
  $query->condition('n.type', 'program_instance');
  $query->condition('fid.field_instance_date_value', $today, '>');
  $query->orderBy('fid.field_instance_date_value', 'ASC');
  $results = $query->execute();

  $program_instances = array();
  foreach($results as $instance) {
    if (empty($program_instances[$instance->field_program_target_id])) {
      $program_instances[$instance->field_program_target_id] = $instance->nid;
    }
  }

  return $program_instances;
}
