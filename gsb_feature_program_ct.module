<?php
/**
 * @file
 * Code for the GSB Feature Program Content Type feature.
 */

include_once 'gsb_feature_program_ct.features.inc';

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gsb_feature_program_ct_form_node_form_alter(&$form, &$form_state) {
  $language = $form['language']['#value'];

  $form['title']['#title'] = 'Program Name';

  // hide the n/a option for field_image_or_video radio buttons
  unset($form['field_image_or_video']['und']['#options']['_none']);

  // show/hide the image or video fields based on field_image_or_video value
  $form['field_learn_more_photo']['#states'] = array(
    'visible' => array(
      ':input[name="field_image_or_video[' . $language . ']"]' => array(
        array('value' => 'Image'),
      ),
    ),
  );
  $form['field_learn_more_video_title']['#states'] = array(
    'visible' => array(
      ':input[name="field_image_or_video[' . $language . ']"]' => array(
        array('value' => 'Video'),
      ),
    ),
  );
  $form['field_video_description']['#states'] = array(
    'visible' => array(
      ':input[name="field_image_or_video[' . $language . ']"]' => array(
        array('value' => 'Video'),
      ),
    ),
  );
  $form['field_video_url']['#states'] = array(
    'visible' => array(
      ':input[name="field_image_or_video[' . $language . ']"]' => array(
        array('value' => 'Video'),
      ),
    ),
  );

  $form['field_link_single']['#states'] = array(
    'visible' => array(
      ':input[name="field_program_detail[' . $language . ']"]' => array(
        array('value' => '1'),
      ),
    ),
  );

  $form['field_overview_description']['#states'] = array(
    'invisible' => array(
      ':input[name="field_program_detail[' . $language . ']"]' => array(
        array('value' => '1'),
      ),
    ),
  );
  $form['field_key_benefits_description']['#states'] = array(
    'invisible' => array(
      ':input[name="field_program_detail[' . $language . ']"]' => array(
        array('value' => '1'),
      ),
    ),
  );
}

/**
 * Implements hook_node_insert().
 */
function gsb_feature_program_ct_entity_insert($node, $type) {
  if ($type == 'node') {
    _gsb_feature_program_ct_node_save($node);
  }
}

/**
 * Implements hook_node_update().
 */
function gsb_feature_program_ct_entity_update($node, $type) {
  if ($type == 'node') {
    _gsb_feature_program_ct_node_save($node);
  }
}

/**
 * Helper for hook_node_insert() and hook_node_update().
 */
function _gsb_feature_program_ct_node_save($node) {

  if ($node->type != 'program') {
    return;
  }
  if ($node->path['alias'] == '') {
    return;
  }

  _gsb_feature_program_ct_create_ppp($node, 'curriculum');
  _gsb_feature_program_ct_create_ppp($node, 'faculty');
  _gsb_feature_program_ct_create_ppp($node, 'participant');

  if ($node->field_program_small_teams['und'][0]['value'] == '1') {
    _gsb_feature_program_ct_create_ppp($node, 'team');
  }

}

function _gsb_feature_program_ct_create_ppp($node, $ppp_type) {

  $ppp_node = new stdClass();  // Create a new node object
  $ppp_node->type = 'program_panelized_page';  // Content type
  $ppp_node->language = LANGUAGE_NONE;
  node_object_prepare($ppp_node);  //Set some default values

  $ppp_node->title = $node->title . ' --- ' . $ppp_type;

  $ppp_node->status = 1;   // (1 or 0): published or unpublished
  $ppp_node->promote = 0;  // (1 or 0): promoted to front page or not
  $ppp_node->sticky = 0;   // (1 or 0): sticky at top of lists or not
  $ppp_node->comment = 0;  // 2 = comments open, 1 = comments closed, 0 = comments hidden

  // Add author of the node
  $ppp_node->uid = 1;

  $program_path_alias = $node->path['alias'];
  $program_path_alias_title = explode('/', $program_path_alias);
  $program_path_alias_title = $program_path_alias_title[sizeof($program_path_alias_title) - 1];

  $path = 'exec-ed/programs/' . $program_path_alias_title . '/' . $ppp_type;
  $ppp_node->path = array('alias' => $path);

  $path = drupal_lookup_path("source", $path);
  $found_node = menu_get_object("node", 1, $path);

  if (!$found_node) {
    // Save the new Program Panelized Page node
    node_save($ppp_node);
    // Resave the Program Panelized Page node
    // With the in-place editor option
    $ppp_node = node_load($ppp_node->nid);
    $ppp_node->field_program['und'][0]['target_id'] = $node->nid;
    $ppp_node->panelizer['page_manager']->pipeline = 'ipe';
    node_save($ppp_node);
  }

}

/**
 * Implementation of hook_block_info()
 *
 */
function gsb_feature_program_ct_block_info() {
  return array(
    'program_menu' => array(
      'info' => t('Program Menu'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    )
  );
}

/**
 * Implementation of hook_block_view
 *
 * Define callbacks for block display
 *
 */
function gsb_feature_program_ct_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'program_menu':
      $block['content'] = theme('gsb_feature_program_ct_program_menu');
      break;
  }
  return $block;
}

/**
 * Implements hook_theme().
 *
 * Define custom theme hooks
 */
function gsb_feature_program_ct_theme($existing, $type , $theme, $path) {
  return array(
    'gsb_feature_program_ct_program_menu' => array(
      'template' => 'templates/gsb-freature-program-ct-program-menu',
      'file' => 'program_menu.theme.inc',
    )
  );
}
